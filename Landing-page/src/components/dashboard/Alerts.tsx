"use client";
import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  AlertTriangle,
  TrendingDown,
  TrendingUp,
  DollarSign,
  Clock,
  Settings,
  Bell,
  BellOff,
  Filter,
  X,
} from "lucide-react";

interface Alert {
  id: string;
  type: "critical" | "warning" | "info" | "success";
  title: string;
  message: string;
  timestamp: Date;
  isRead: boolean;
  action?: string;
  value?: string;
  change?: string;
}

export default function Alerts() {
  // BACKEND: subscribe to alerts feed via WebSocket and/or fetch initial alerts list
  // AIML: alerts may be generated by anomaly detection models; include scores
  const [alerts, setAlerts] = useState<Alert[]>([
    {
      id: "1",
      type: "critical",
      title: "Unusual Trading Volume Detected",
      message: "AAPL showing 300% above average volume. Consider reviewing position.",
      timestamp: new Date(Date.now() - 15 * 60 * 1000),
      isRead: false,
      value: "$175.23",
      change: "-2.8%"
    },
    {
      id: "2",
      type: "warning",
      title: "Portfolio Concentration Risk",
      message: "Tech sector allocation at 31%, exceeding your 25% limit.",
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
      isRead: false,
      value: "31%",
      change: "+6%"
    },
    {
      id: "3",
      type: "success",
      title: "Rebalancing Opportunity",
      message: "Bonds underweight by 5%. Consider increasing allocation.",
      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),
      isRead: true,
      value: "20%",
      change: "-5%"
    },
    {
      id: "4",
      type: "info",
      title: "Dividend Payment Received",
      message: "Quarterly dividend from Microsoft (MSFT) has been credited.",
      timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),
      isRead: true,
      value: "$1,250.00",
      change: "+3.2%"
    },
    {
      id: "5",
      type: "warning",
      title: "Stop Loss Triggered",
      message: "TSLA position closed automatically at stop loss level.",
      timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000),
      isRead: false,
      value: "$245.67",
      change: "-8.5%"
    }
  ]);

  // BACKEND: persist notification preferences per user
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [selectedFilter, setSelectedFilter] = useState<string>("all");

  const getAlertIcon = (type: string) => {
    switch (type) {
      case "critical":
        return <AlertTriangle className="w-5 h-5 text-destructive" />;
      case "warning":
        return <TrendingDown className="w-5 h-5 text-warning" />;
      case "success":
        return <TrendingUp className="w-5 h-5 text-success" />;
      default:
        return <DollarSign className="w-5 h-5 text-[var(--primary)]" />;
    }
  };

  const getAlertBadge = (type: string) => {
    switch (type) {
      case "critical":
        return <Badge className="bg-destructive/20 text-destructive border-destructive/30">Critical</Badge>;
      case "warning":
        return <Badge className="bg-warning/20 text-warning border-warning/30">Warning</Badge>;
      case "success":
        return <Badge className="bg-success/20 text-success border-success/30">Success</Badge>;
      default:
        return <Badge className="bg-[var(--primary)]/20 text-[var(--primary)] border-[var(--primary)]/30">Info</Badge>;
    }
  };

  const formatTimeAgo = (timestamp: Date) => {
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - timestamp.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 60) {
      return `${diffInMinutes}m ago`;
    } else if (diffInMinutes < 1440) {
      return `${Math.floor(diffInMinutes / 60)}h ago`;
    } else {
      return `${Math.floor(diffInMinutes / 1440)}d ago`;
    }
  };

  // BACKEND: mark alert as read via API; update local state optimistically
  const markAsRead = (alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId ? { ...alert, isRead: true } : alert
    ));
  };

  // BACKEND: archive/dismiss alert via API; reflect deletion server-side
  const dismissAlert = (alertId: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== alertId));
  };

  const filteredAlerts = alerts.filter(alert => {
    if (selectedFilter === "all") return true;
    if (selectedFilter === "unread") return !alert.isRead;
    return alert.type === selectedFilter;
  });

  const unreadCount = alerts.filter(alert => !alert.isRead).length;

  return (
    <div className="p-6 space-y-6 bg-background min-h-screen">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground mb-2">Smart Alerts</h1>
          <p className="text-muted-foreground">
            Real-time notifications for portfolio anomalies and market opportunities
          </p>
        </div>
        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2">
            {notificationsEnabled ? <Bell className="w-4 h-4" /> : <BellOff className="w-4 h-4" />}
            <Switch 
              checked={notificationsEnabled}
              onCheckedChange={setNotificationsEnabled}
            />
          </div>
          <Button variant="outline">
            <Settings className="w-4 h-4 mr-2" />
            Configure
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Total Alerts</p>
              <p className="text-2xl font-bold text-foreground">{alerts.length}</p>
            </div>
            <Bell className="w-8 h-8 text-[var(--primary)]" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Unread</p>
              <p className="text-2xl font-bold text-destructive">{unreadCount}</p>
            </div>
            <AlertTriangle className="w-8 h-8 text-destructive" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Critical</p>
              <p className="text-2xl font-bold text-destructive">
                {alerts.filter(a => a.type === "critical").length}
              </p>
            </div>
            <TrendingDown className="w-8 h-8 text-destructive" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Opportunities</p>
              <p className="text-2xl font-bold text-success">
                {alerts.filter(a => a.type === "success").length}
              </p>
            </div>
            <TrendingUp className="w-8 h-8 text-success" />
          </div>
        </Card>
      </div>

      {/* Filters and Alerts */}
      <Card className="p-6">
        <Tabs value={selectedFilter} onValueChange={setSelectedFilter} className="space-y-6">
          <div className="flex items-center justify-between">
            <TabsList className="bg-muted/50">
              <TabsTrigger value="all">All ({alerts.length})</TabsTrigger>
              <TabsTrigger value="unread">Unread ({unreadCount})</TabsTrigger>
              <TabsTrigger value="critical">Critical</TabsTrigger>
              <TabsTrigger value="warning">Warning</TabsTrigger>
              <TabsTrigger value="success">Opportunities</TabsTrigger>
            </TabsList>
            <Button variant="outline" size="sm">
              <Filter className="w-4 h-4 mr-2" />
              Filter
            </Button>
          </div>

          <TabsContent value={selectedFilter} className="space-y-4">
            {filteredAlerts.length === 0 ? (
              <div className="text-center py-12">
                <Bell className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium text-foreground mb-2">No alerts found</h3>
                <p className="text-muted-foreground">All caught up! No alerts match your current filter.</p>
              </div>
            ) : (
              filteredAlerts.map((alert) => (
                <Card
                  key={alert.id}
                  className={`p-4 transition-all duration-200 hover:shadow-lg ${
                    !alert.isRead ? "border-l-4 border-l-[var(--primary)]" : ""
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-4 flex-1">
                      <div className="mt-1">
                        {getAlertIcon(alert.type)}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className={`font-semibold ${!alert.isRead ? "text-foreground" : "text-muted-foreground"}`}>
                            {alert.title}
                          </h3>
                          {getAlertBadge(alert.type)}
                          {!alert.isRead && (
                            <div className="w-2 h-2 bg-[var(--primary)] rounded-full"></div>
                          )}
                        </div>
                        <p className="text-sm text-muted-foreground mb-3">
                          {alert.message}
                        </p>
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {formatTimeAgo(alert.timestamp)}
                          </div>
                          {alert.value && (
                            <div className="flex items-center gap-2">
                              <span className="font-medium text-foreground">{alert.value}</span>
                              {alert.change && (
                                <span className={alert.change.startsWith('+') ? "text-success" : "text-destructive"}>
                                  {alert.change}
                                </span>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {!alert.isRead && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => markAsRead(alert.id)}
                        >
                          Mark Read
                        </Button>
                      )}
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => dismissAlert(alert.id)}
                        className="text-muted-foreground hover:text-foreground"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </Card>
              ))
            )}
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  );
}
